---
import type { InferGetStaticPropsType } from "astro";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon";

import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import Layout from "@/layouts/Layout.astro";
import { getTechIcon } from "@/lib/icons";

export async function getStaticPaths() {
  const blogEntries = await getCollection("works");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props;
const { Content: WorkContent } = await entry.render();
---

<Layout title={entry.data.title} description={entry.data.services}>
  <Header />

  <main class="mx-auto flex max-w-7xl flex-col gap-10">
    <h1 class="text-6xl font-medium text-gray-700">{entry.data.title}</h1>

    <div class="grid grid-cols-[3fr_1fr] gap-10">
      <div class="md-work-body">
        <WorkContent />
      </div>

      <div class="flex flex-col gap-10 text-[15px]">
        <div>
          <h4 class="pb-1.5 text-gray-400">Client</h4>
          <p class="text-gray-700/90">{entry.data.client}</p>
        </div>

        <div>
          <h4 class="pb-1.5 text-gray-400">Services</h4>
          <ul class="text-gray-700/90">
            {entry.data.services.split(",").map((service) => <li>{service.trim()}</li>)}
          </ul>
        </div>

        <div>
          <h4 class="pb-1.5 text-gray-400">Technologies</h4>
          <ul class="flex gap-3 text-gray-700/90">
            {
              entry.data.tech.map((tech) => (
                <li class="h-8 w-8 overflow-hidden" title={tech}>
                  <Icon name={getTechIcon(tech)} />
                </li>
              ))
            }
          </ul>
        </div>
      </div>

      {
        entry.data.website ? (
          <a
            class="md-work-website text-[18px] font-semibold text-blue-500"
            target="_blank"
            rel="noopener noreferrer"
            href={entry.data.website}
          >
            Visit website
            <svg
              class="inline-block"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
            >
              <path
                fill="currentColor"
                d="M13.3 17.275q-.3-.3-.288-.725t.313-.725L16.15 13H5q-.425 0-.713-.288T4 12q0-.425.288-.713T5 11h11.15L13.3 8.15q-.3-.3-.3-.713t.3-.712q.3-.3.713-.3t.712.3L19.3 11.3q.15.15.213.325t.062.375q0 .2-.063.375t-.212.325l-4.6 4.6q-.275.275-.687.275t-.713-.3Z"
              />
            </svg>
          </a>
        ) : null
      }
    </div>
  </main>

  <div class="my-10 min-h-[600px] bg-gray-200 py-8">
    <div class="mx-auto flex max-w-7xl flex-wrap justify-between gap-10">
      {
        entry.data.images.map((image) => (
          <a
            class="transition hover:scale-105"
            target="_blank"
            rel="noopener noreferrer"
            href={`${import.meta.env.BASE_URL}${image.src}`}
          >
            <img class="max-h-[350px] opacity-90" src={image.src} alt={image.alt} />
          </a>
        ))
      }
    </div>
  </div>

  <Footer />
</Layout>

<style is:global>
  .md-work-body {
    @apply text-gray-700;
    font-size: 20px;

    font-weight: 400;
    line-height: 1.5em;
    color: #3b4c56;
    margin-bottom: 40px;
    margin-top: 0px;

    a {
      @apply text-blue-500;
    }
  }
</style>

<style>
  .md-work-website:hover > svg {
    @apply translate-x-1 scale-105 transition;
  }
</style>
